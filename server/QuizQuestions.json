[
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "The sequence of instructions that, if executed simultaneously, may give incorrect values is known as the ______________.",
        "options": [
            "critical section",
            "non-critical section",
            "execution code",
            "main program"
        ],
        "answers": ["critical section"],
        "feedback": [
            "The critical section refers to the segment of code where processes access shared resources, such as common variables and files, and perform write operations on them. Since processes execute concurrently, any process can be interrupted mid-execution."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "Which of the following conditions must be satisfied to solve the critical section problem?",
        "options": [
            "Bounded Wating",
            "Mutual Exclusion",
            "None of the above",
            "Guaranteed Ordering",
            "Progress"
        ],
        "answers": ["Bounded Wating", "Mutual Exclusion", "Progress"],
        "feedback": [
            "There should be a boundary on getting chances to enter into the critical section. If bounded waiting is not satisfied then there is a possibility of starvation."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "Bounded waiting implies that there exists a bound on the number of times a process is allowed to enter its critical section ____________",
        "options": [
            "before a process has made a request to enter its critical section",
            "after a process has made a request to enter its critical section and before the request is granted",
            "none of the mentioned",
            "when another process is in its critical section"
        ],
        "answers": [
            "after a process has made a request to enter its critical section and before the request is granted"
        ],
        "feedback": [
            "Bounded wait insures that there exists a bound, or limit, on the number of times other processes are allowed to enter their critical sections after a process has made request to enter its critical section and before that request is granted. Which implies that there must not be any starvation."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "Which of the following Critical Section properties is NOT sure to be satisfied by test_and_set() atomic hardware instruction?",
        "options": [
            "Mutual Exclusion",
            "Progress",
            "None of the above",
            "Bounded Wating"
        ],
        "answers": ["Bounded Wating"],
        "feedback": [
            "The test_and_set() atomic hardware instruction provides mutual exclusion and progress guarantees, meaning that only one process can access the critical section at a time, and some processes will eventually enter the critical section if no other process is currently in it. However, it does not guarantee bounded waiting, which means that a process may need to wait an unbounded amount of time before it can enter the critical section, even if no other processes are currently accessing it. This can lead to a \" starvation \" situation, where a process is continually blocked from entering the critical section while other processes repeatedly access it."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "What are the two atomic operations permissible on semaphores?",
        "options": [
            "wait()",
            "stop()",
            "none of the above",
            "signal()",
            "sleep()"
        ],
        "answers": ["wait()", "signal()"],
        "feedback": [
            "The wait() operation decrements the value of the semaphore by 1, and if the resulting value is negative, the process executing the wait() operation is blocked until another process signals the semaphore by executing the signal() operation. The signal() operation increments the value of the semaphore by 1, and if any processes are waiting on the semaphore, it unblocks one of them. The other options stop() and sleep(), are not atomic operations on semaphores."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "What is the main disadvantage of spinlocks?",
        "options": [
            "they can be unreliable sometimes",
            "they are complex to code",
            "they require busy waiting",
            "they are not sufficient for small critical section"
        ],
        "answers": ["they require busy waiting"],
        "feedback": [
            "Busy waiting is a technique in which a process repeatedly checks if a shared resource, such as a critical section, is available instead of yielding the CPU to another process. While the process is busy waiting, it is consuming CPU cycles without performing any useful work, which can lead to inefficient use of system resources. In the case of spinlocks, a process that cannot acquire a lock on a shared resource will keep spinning in a loop, checking the lock repeatedly until it becomes available. This can lead to unnecessary CPU consumption and delays in other processes that could have used the CPU. Therefore, spinlocks are not recommended for long critical sections or in systems with many threads or processes contending for the same resources."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "To ensure difficulties do not arise in the readers - writers problem _______ are given exclusive access to the shared resources",
        "options": [
            "readers",
            "none of the mentioned",
            "writers",
            "readers and writers"
        ],
        "answers": ["writers"],
        "feedback": [
            "In the readers-writers problem, writers need exclusive access to the shared resource to ensure data consistency. This is because if multiple writers write to the shared resource simultaneously, it can lead to data inconsistency. In contrast, multiple readers can access the shared resource simultaneously without any issues, so they do not need exclusive access."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "At a particular time of computation the value of a counting semaphore is 7. Then 18 wait() operations and 15 signal() operations were completed on this semaphore. The resulting value of the semaphore is?",
        "options": ["5", "26", "45", "4"],
        "answers": ["4"],
        "feedback": [
            "At the beginning, the semaphore had a value of 7. Then, 18 wait() operations were completed on this semaphore, which means that the semaphore was decremented by 18. After the wait() operations, the semaphore value is 7 - 18 = -11. Finally, 15 signal() operations were completed on this semaphore, which means the semaphore was incremented by 15. After the signal() operations, the semaphore value is -11 + 15 = 4. Therefore, the resulting value of the semaphore is 4."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "In bounded buffer problem which of the following assumptions stand TRUE",
        "options": [
            "The empty and full semaphores count the number of empty and full buffers. The semaphore empty is initialised to the value n; the semaphore full is initialised to the value 0",
            "The mutex semaphore provides mutual exclusion for accesses to the buffer pool and is initialised to the value 0",
            "The empty and full semaphores count the number of empty and full buffers. The semaphore empty is initialised to the value 0; the semaphore full is initialised to the value n",
            "The mutex semaphore provides mutual exclusion for accesses to the buffer pool and is initialised to the value 1",
            "We assume that the pool consists of n buffers, each capable of holding one item"
        ],
        "answers": [
            "The empty and full semaphores count the number of empty and full buffers. The semaphore empty is initialised to the value n; the semaphore full is initialised to the value 0",
            "We assume that the pool consists of n buffers, each capable of holding one item"
        ],
        "feedback": [
            "The assumptions that stand true for the bounded buffer problem are: The empty and full semaphores count the number of empty and full buffers. The semaphore empty is initialised to the value n; the semaphore full is initialised to the value 0. We assume that the pool consists of n buffers, each capable of holding one item. These assumptions are necessary for solving the bounded buffer problem using semaphores."
        ]
    },
    {
        "topic": "Sync and Sync Prob",
        "chapter": "5",
        "question": "The dining - philosophers problem will occur in case of ____________",
        "options": [
            "4 philosophers and 5 chopsticks",
            "5 philosophers and 4 chopsticks",
            "3 philosophers and 5 chopsticks",
            "5 philosophers and 5 chopsticks"
        ],
        "answers": ["5 philosophers and 5 chopsticks"],
        "feedback": [
            "5 philosophers and 5 chopsticks  - Each philosopher picks up the chopstick to their right and waits for the chopstick to their left to become available, which can lead to a deadlock."
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "Assume the semaphore S has an initial value 1. When there are k processes waiting on S, what is the value for S?",
        "options": ["1-k", "k", "k-1", "-k"],
        "answers": ["1-k"],
        "feedback": [
            "Assume the buffer is full now. If the producer executes wait(mutex) first and gets access to the buffer, then the producer will be blocked on wait(empty) and wait for the consumer to call signal(empty). However, the consumer is now blocked on the mutex. A similar situation can happen when the order of wait(full) and wait(mutex) changes."
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "Which of the following operations is an atomic operation",
        "options": ["x++", "x=1", "++x"],
        "answers": ["x=1"],
        "feedback": [
            "x++ is implemented in three instructions: Read X into a register, Increment the value, Store the value (Write it back), The thread can be pre-empted in between any of those."
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "A critical section in a program",
        "options": [
            "avoids deadlocks",
            "Accesses shared resources",
            "should run within a certain amount of time"
        ],
        "answers": ["Accesses shared resources"],
        "feedback": [
            "A critical section is a code section in a program where the shared resources (such as variables, data structures, etc.) are accessed and manipulated. Since multiple processes/threads may access and manipulate these resources concurrently, it is important to ensure that only one process/thread executes the critical section at a time to avoid data inconsistency and other issues."
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "A counting semaphore S is initialized to 6. Post, 8 waits ()  operations and 10 signal() operations performed on S. What is the final value of S?",
        "options": ["8", "18", "-2", "10"],
        "answers": ["8"],
        "feedback": [
            "Wait operation decrements the value of the semaphore variable by 1. Signal operation increments the value of the semaphore variable by 1. Final value of semaphore variable S = 6 – (8 x 1) + (10 x 1) = 8"
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "An operating system implements a policy that requires a process to release all resources before making a request for another resource. Select the TRUE statement from the following:",
        "options": [
            "Starvation can occur but deadlock cannot occur",
            "Both starvation and deadlock can occur",
            "Starvation cannot occur but deadlock can occur",
            "Neither starvation nor deadlock can occur"
        ],
        "answers": ["Starvation can occur but deadlock cannot occur"],
        "feedback": [
            "If a process is required to release all resources before requesting another resource, starvation cannot occur because a process must release all its resources before making another request. However, deadlock can still occur if multiple processes are waiting for the same set of resources and the resources are not released in a way that allows all processes to access them."
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "If one thread of a process is holding the lock on a mutex, and another thread of the process attempts to lock the mutex, the whole process is blocked.",
        "options": ["True", "False"],
        "answers": ["False"],
        "feedback": [
            "If the mutex is already locked by another thread, the thread waits for the mutex to become available. The thread that has locked a mutex becomes its current owner and remains the owner until the same thread has unlocked it."
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "If processes P1, P2, and P3 are all requesting resource R, but the operating system allows P1 and P2 to access R repeatedly while P3 continues to wait for R, that is called",
        "options": [
            "Starvation",
            "Deadlock",
            "None of the above",
            "Busy Waiting"
        ],
        "answers": ["Starvation"],
        "feedback": [
            "Starvation occurs when a process cannot get the required resources to complete its execution because other processes hold the resources. In the given scenario, processes P1 and P2 repeatedly access resource R while P3 waits. This means P3 cannot get the required resource, which can cause a delay or even prevent it from completing its execution. This situation is called starvation."
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "When several processes access and manipulate the same data concurrently and the outcome of the execution is non-deterministic i.e it depends on the particular order in which access takes place is called ____________",
        "options": [
            "starvation",
            "race condition",
            "aging",
            "data consistency"
        ],
        "answers": ["race condition"],
        "feedback": [
            "In a race condition, multiple processes or threads access and manipulate the same shared resource or data concurrently, and the outcome of the execution depends on the particular order in which access takes place. Race conditions can result in inconsistent or incorrect program behaviour and can be difficult to detect and reproduce. Starvation refers to a situation where a process cannot acquire the necessary resources to make progress, while aging refers to a scheduling algorithm that assigns priority based on how long a process has been waiting. Data consistency refers to data being accurate, valid, and consistent across different system parts."
        ]
    },
    {
        "topic": "Synchro and Classical",
        "chapter": "6 and 7",
        "question": "A negative value for a counting semaphore denotes that ____________",
        "options": [
            "it is invalid",
            "none of the mentioned",
            "no operation can be further performed on it until the signal operation is performed on it",
            "its magnitude is the number of processes waiting on that semaphore"
        ],
        "answers": [
            "its magnitude is the number of processes waiting on that semaphore"
        ],
        "feedback": [
            "If the resulting semaphore value is negative, the calling thread or process is blocked, and cannot continue until some other thread or process increments it"
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "Two threads executing the following operations simultaneously: lock(m1) lock(m2) unlock(m1) unlock(m2) Will there be a deadlock?",
        "options": ["Yes", "No"],
        "answers": ["No"],
        "feedback": [
            "No, there will not be a deadlock in this scenario. Both threads acquire the locks in the same order, so there is no possibility of a circular wait. Therefore, the locks will be released in the reverse order, and both threads will complete their execution without any deadlock."
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "Two threads executing the following operations simultaneously: lock(m1) lock(m2) unlock(m1) lock(m1) unlock(m2) unlock(m1) Will there be a deadlock? Exaplin why.",
        "options": ["Yes", "No"],
        "answers": ["Yes"],
        "feedback": [
            "Assume T1 finishes execution of lock(m1), lock(m2) and unlock(m1), and is about to execute lock(m1). Assume T2 finishese execution of lock(m1), and is about to execute lock(m2). T1 is requesting m1, but holding the lock for m2; T2 is requesting m2, but holding the lock for m1. A deadlock occurred."
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "Assume T1 finishes execution of lock(m1), lock(m2) and unlock(m1), and is about to execute lock(m1). Assume T2 finishese execution of lock(m1), and is about to execute lock(m2). T1 is requesting m1, but holding the lock for m2. T2 is requesting m2, but holding the lock for m1. A deadlock occurred.",
        "options": [
            "Mutual exclusion",
            "Resource utilization is poor",
            "CPU scheduling is unreasonable",
            "Circular wait"
        ],
        "answers": ["Mutual exclusion", "Circular wait"],
        "feedback": [
            "Mutual exclusion is present because both processes hold exclusive locks on the resources they need, and circular wait is present because there is a circular dependency between the two processes regarding the resources they are holding and waiting for."
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "Which of the followings are correct about deadlock?",
        "options": [
            "Imposing a total ordering on all resource can prevent the deadlock",
            "Dynamically making allocation decisions can avoid the deadlock",
            "A deadlock can be resolved by releasing all the resources held by the current process"
        ],
        "answers": [
            "Imposing a total ordering on all resource can prevent the deadlock",
            "Dynamically making allocation decisions can avoid the deadlock",
            "A deadlock can be resolved by releasing all the resources held by the current process"
        ],
        "feedback": [
            "A deadlock is a situation in which two computer programs sharing the same resource are effectively preventing each other from accessing the resource, resulting in both programs ceasing to function."
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "There are 5 available resources of the same type, shared by 4 processes. Each process can request at most ____ resources so that there is no deadlock?",
        "options": ["2", "4", "3", "1"],
        "answers": ["2"],
        "feedback": [
            "Assume all the processses are requesting 3 resources, and OS allocates 2, 1, 1, 1 resource(s) to each process. Then none of them has adequate resources to run and will need to wait for each other."
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "A cycle in a resource allocation graph guarantees a deadlock.",
        "options": ["True", "False"],
        "answers": ["False"],
        "feedback": ["Not in multiple instance scenario"]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "Which of the following is NOT true of deadlock prevention and deadlock avoidance schemes?",
        "options": [
            "In deadlock prevention, the request for resources is always granted if the resulting state is safe",
            "In deadlock avoidance, the request for resources is always granted if the result state is safe",
            "Deadlock avoidance is less restrictive than deadlock prevention",
            "Deadlock avoidance requires knowledge of resource requirements a priority"
        ],
        "answers": [
            "In deadlock prevention, the request for resources is always granted if the resulting state is safe"
        ],
        "feedback": [
            "The resource request may be denied in deadlock prevention even if the resulting state is safe. This is because deadlock prevention schemes aim to prevent the system from reaching a deadlock state by limiting how resources can be requested and allocated. This may sometimes require denying a request even if the resulting state would be safe."
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "Which of the following is NOT a valid deadlock prevention scheme?",
        "options": [
            "Never request a resource after releasing any resource",
            "Release all resources before requesting a new resource",
            "Number the resources uniquely and never request a lower numbered resource than the last one requested.",
            "Request and all required resources be allocated before execution"
        ],
        "answers": ["Never request a resource after releasing any resource"],
        "feedback": [
            "Because it can lead to starvation. If a process releases a resource and never requests it again, other processes may acquire and hold that resource indefinitely, preventing the first process from progressing. This can result in starvation, where a process cannot proceed despite the availability of resources."
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "With single resource, deadlock occurs",
        "options": [
            "none of the above",
            "if there are more than two processes competing for that resources",
            "if there are only two processes competing for that resources",
            "if there is a single process competing for that resources"
        ],
        "answers": ["none of the above"],
        "feedback": [
            "When there is only one resource, the conditions of hold and wait and circular wait gets eliminated. With the assumption that no process can use a resource for an infinite amount of time, whenever a process will finish its execution, another process can get the resource. So a deadlock cant occur."
        ]
    },
    {
        "topic": "Deadlock",
        "chapter": "8",
        "question": "A problem encountered in multitasking when a process is perpetually denied necessary resources is called ___",
        "options": ["starvation", "deadlock", "aging"],
        "answers": ["starvation"],
        "feedback": [
            "A condition where a computer process cannot be supported by available computer resource"
        ]
    }
]
